@page "/"
@using QuickActions.Common.Specifications;
@using Sample.Common.Interfaces;
@using Sample.Common.Models;

@if (User != null && Users != null)
{
    <h1>Sasha:</h1>

    <div>@User.Name</div>
    <div>@User.Email</div>
    <div>@User.Phone</div>

    <h1>Other users:</h1>

    @foreach (var item in Users)
    {
        <div>@item.Name</div>
    }
}

@code {
    [Inject]
    public IUsers UsersService { get; set; }

    public List<User> Users { get; set; }
    public User User { get; set; }

    protected override async Task OnInitializedAsync()
    {
        User = await UsersService.Read(new Specification<User>(u => u.Name == "Sasha"));
        // new Specification<User>() -- All users
        // new Specification<User>(u => u.Name != "Sasha" || u.Phone == "789")
        Users = await UsersService.Read(new UserByPhoneAndNotNameSpec("Sasha", "789"), 0, int.MaxValue);
    }

    private class UserByNotNameSpec : Specification<User>
    {
        public UserByNotNameSpec(string name)
        {
            Predicate = u => u.Name != name;
        }
    }

    private class UserByPhoneSpec : Specification<User>
    {
        public UserByPhoneSpec(string phone)
        {
            Predicate = u => u.Phone == phone;
        }
    }

    private class UserByPhoneAndNotNameSpec : Specification<User>
    {
        public UserByPhoneAndNotNameSpec(string name, string phone) : base(new UserByNotNameSpec(name) || new UserByPhoneSpec(phone)) {}
    }
}